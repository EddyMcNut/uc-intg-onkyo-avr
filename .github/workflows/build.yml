name: Build and Release

on:
  push:
    branches:
      - "**"
    paths:
      - "**/*.js"
      - "**/*.ts"
      - ".github/**/*.yml"
      - "package-lock.json"
    tags:
      - "v*.*.*"
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

env:
  INTG_NAME: onkyo-avr
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from package.json
        id: pkg
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Sync driver.json version with package.json
        run: |
          jq --arg ver "$VERSION" '.version = $ver' driver.json > driver.json.tmp && mv driver.json.tmp driver.json

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Build
        run: |
          npm install
          npm run build

      - name: Remove config.json
        run: rm -f config.json

      - name: Get production modules
        run: |
          rm -Rf node_modules
          npm install --production

      - name: Add version
        run: |
          mkdir -p artifacts
          cd artifacts
          echo ${{ env.VERSION }} > version.txt

      - name: Create custom intg archive
        shell: bash
        run: |
          mv dist artifacts/
          mv artifacts/dist artifacts/bin
          mv artifacts/bin/index.js artifacts/bin/driver.js
          cp package.json artifacts/bin/
          mv node_modules artifacts/bin/
          cp driver.json artifacts/
          # patch metadata to not conflict with pre-installed driver
          jq '.driver_id = "uc_onkyo-avr_driver_custom" | .name.en = "Onkyo AVR custom"' driver.json > artifacts/driver.json
          echo "ARTIFACT_NAME=uc-intg-${{ env.INTG_NAME }}-${{ env.VERSION }}" >> $GITHUB_ENV

      - name: Set driver.js as executable
        run: chmod +x artifacts/bin/driver.js

      - name: Create upload artifact
        shell: bash
        run: |
          tar czvf ${{ env.ARTIFACT_NAME }}.tar.gz -C ${GITHUB_WORKSPACE}/artifacts .
          ls -lah

      - uses: actions/upload-artifact@v4
        id: upload_artifact
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_NAME }}.tar.gz
          if-no-files-found: error
          retention-days: 3

  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from package.json
        id: pkg
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ARTIFACT_NAME }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
